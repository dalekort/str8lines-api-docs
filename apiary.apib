FORMAT: 1A
HOST: http://sqd.test.str8lines.com/simplyQuick/rest

# str8lines

The str8lines platform is a simple API allowing consumers to read and write data pertaining  product development processes.

# Str8Lines API Root [/]

This resource does not have any attributes. Instead it offers the initial
API affordances in the form of the links in the JSON body.

It is recommend to follow the “url” link values,
[Link](https://tools.ietf.org/html/rfc5988) or Location headers where
applicable to retrieve resources. Instead of constructing your own URLs,
to keep your client decoupled from implementation details.



## Group ADMIN

Resources related to administrative functions in the API.

## Time Periods [/season]

A Time object has the following attributes:

+ uuid - the unique identifier of this time period in the database

### View a Time Period [GET]


+ Response 200 (application/json)

        {
            "uuid": 21804,
            "name": "Fall 2014"
        }

## Silos [/silos]

A Silo object has the following attributes:

+ uuid - the unique identifier of this time period in the database
+ type (string) - The type of item to create
+ _access_token (string) - The Oauth2 access token used to validate access
+ _refresh_token (string) - The Oauth2 refresh token used to get a new access token
+ _description (string) - The description of the silo
+ _silo_type (string) - The type of the silo. (.e.g. ONEDRIVE_PERSONAL or ONEDRIVE_BUSINESS)
+ _end_point_uri (string) - The uri for the external service
+ _folder_list (string) - A comma seperated list of folder to be monitored
+ _last_processed_datetime (long)- The date and time in millisecond of when the folder was latest processed.


### Get all of the user's Silos [GET /silos]

+ Response 200 (application/json)

    + Body

            {
                "data":
                        [ 
                            {
                                "_access_token": "EwB4Aq1DBAAUGCCXc8wU/zFu9QnLdZXy+YnElFkAAQsixDYjwX8QDxj5AGZqZJR2DP5dhq19B9f7DW6KG234mtw/S7MhwZP7lgRrBKCr1FTHL51a98pq/AnBkj1uSggdnyfSqWVnruPSuVcauVOKEifa1yKxgYzZLDA0qhOyESPuGvH7Kga7EYgyrWykcjfeUh9RcH334+uuWp8EJ4a8GVkj8A6CPJvwX3ziqY15XH83DiHEXBCXLAyFrB+42OdOrfi5C++mqod9/X+h6XoSVUFpR9lxrgPim3hNvbwz4uW77xnup8v9Gwb13cABQmFXLf7FbBgKg7epRWGL9d8T4t9tvDbW76eroLZM60w2NrTxKt4p/4Hu6dTe+yypmYIDZgAACDT94VB+u1fWSAEqeJBYcONJfIQhDoCZLQouVGmnqVTn9sbbHxi5spHT9FozvL/obTAm9aEX0bxmvdhxeNZz4sQ7leddBXXl6Vg4F8PbEjej/ECwCpeoNqPN0gEo+4dCF5tESEGCkbO5n/gude0g/n/6f6TI0wve55ta5sw07d0nmancHClrExU54hoUCzHUMGkOC+uDeURNmQKEWQHz3zy2f4cVPLyO/nNvDZ0JDuLWuH4lZminhZdRz/SW/XvpsDwdstpOWSqa0AhNfqmoOp9KZiFpjZrRUIALWoSqF7zzrciNS3bzKndbVNvncVMU2rlqpSPHGrT6iQ76DPMA3aWonDrii8pzfZemCTjEHgujkbRZU1J/GY++T6Wgf7GTfzrcKmSGZqtcxHuHhbgdn9G4lDiTrxqg/MR9+cSyU/nFng6sv/JIXK0Fg4Sf9UMip8NMYgE=",
                                "_refresh_token": "MCmr3FhU0oHas!*kzSCNGid!nwVJKLflNrhaRZvuJS83RV5*s2qr6qYU2atoThqP40tY1zGu629jq3RZ3NN!ExZ40SI**6EtgVi48LKoELlPnEejP7Ez6g8dRhzeufkbd5rm1ocAVTB34NposKJUwd3VXFELnkuvSSP9A5vE66YrmJs9w*wJFPb5RU9JclGcD*Qk*qu5lU*0m*2s8aX2fltmS76H8s0RW1YLiMm2vt*Ig78llCnCa!aM3iKptuTOzfvzaLqy1kVuvY45Q6mHl2iA1RMrtO3BrFbDEMo7er7IzSZse6xtmF0PLhHsWy6DJtUu2d8S19DtbnKjBFxcl0mFf8Cha9PHwILpHuiOskz9gVezaqypVsWjYWoSwaRedTA$$",
                                "_silo_type": "ONEDRIVE_PERSONAL",
                                "_last_processed_datetime": "892342341124",
                                "_description": "This my OneDrive Personal folder",
                                "_end_point_uri": "",
                                "_folder_list": "1111111,232323",
                                "type": "s8_silo",
                                "uuid": "2924"
                            }
                        ],
                "success": "true"
            }

### Get user's Silo [GET /silos/{siloUUID}]

+ Parameters
    + siloUUID (long)

+ Response 200 (application/json)

    + Body

            {
                "data":
                    {
                        "_access_token": "EwB4Aq1DBAAUGCCXc8wU/zFu9QnLdZXy+YnElFkAAQsixDYjwX8QDxj5AGZqZJR2DP5dhq19B9f7DW6KG234mtw/S7MhwZP7lgRrBKCr1FTHL51a98pq/AnBkj1uSggdnyfSqWVnruPSuVcauVOKEifa1yKxgYzZLDA0qhOyESPuGvH7Kga7EYgyrWykcjfeUh9RcH334+uuWp8EJ4a8GVkj8A6CPJvwX3ziqY15XH83DiHEXBCXLAyFrB+42OdOrfi5C++mqod9/X+h6XoSVUFpR9lxrgPim3hNvbwz4uW77xnup8v9Gwb13cABQmFXLf7FbBgKg7epRWGL9d8T4t9tvDbW76eroLZM60w2NrTxKt4p/4Hu6dTe+yypmYIDZgAACDT94VB+u1fWSAEqeJBYcONJfIQhDoCZLQouVGmnqVTn9sbbHxi5spHT9FozvL/obTAm9aEX0bxmvdhxeNZz4sQ7leddBXXl6Vg4F8PbEjej/ECwCpeoNqPN0gEo+4dCF5tESEGCkbO5n/gude0g/n/6f6TI0wve55ta5sw07d0nmancHClrExU54hoUCzHUMGkOC+uDeURNmQKEWQHz3zy2f4cVPLyO/nNvDZ0JDuLWuH4lZminhZdRz/SW/XvpsDwdstpOWSqa0AhNfqmoOp9KZiFpjZrRUIALWoSqF7zzrciNS3bzKndbVNvncVMU2rlqpSPHGrT6iQ76DPMA3aWonDrii8pzfZemCTjEHgujkbRZU1J/GY++T6Wgf7GTfzrcKmSGZqtcxHuHhbgdn9G4lDiTrxqg/MR9+cSyU/nFng6sv/JIXK0Fg4Sf9UMip8NMYgE=",
                        "_refresh_token": "MCmr3FhU0oHas!*kzSCNGid!nwVJKLflNrhaRZvuJS83RV5*s2qr6qYU2atoThqP40tY1zGu629jq3RZ3NN!ExZ40SI**6EtgVi48LKoELlPnEejP7Ez6g8dRhzeufkbd5rm1ocAVTB34NposKJUwd3VXFELnkuvSSP9A5vE66YrmJs9w*wJFPb5RU9JclGcD*Qk*qu5lU*0m*2s8aX2fltmS76H8s0RW1YLiMm2vt*Ig78llCnCa!aM3iKptuTOzfvzaLqy1kVuvY45Q6mHl2iA1RMrtO3BrFbDEMo7er7IzSZse6xtmF0PLhHsWy6DJtUu2d8S19DtbnKjBFxcl0mFf8Cha9PHwILpHuiOskz9gVezaqypVsWjYWoSwaRedTA$$",
                        "_silo_type": "ONEDRIVE_PERSONAL",
                        "_last_processed_datetime": "892342341124",
                        "_description": "This my OneDrive Personal folder",
                        "_end_point_uri": "",
                        "_folder_list": "1111111,232323",
                        "type": "s8_silo",
                        "uuid": "2924"
                    },
                "success": "true"
            }

### Update user's Silo [PUT /silos/{siloUUID}]

+ Parameters
    + siloUUID (long)

+ Request (application/json)
    + Body
    
            {
                "_access_token": "EwB4Aq1DBAAUGCCXc8wU/zFu9QnLdZXy+YnElFkAAQsixDYjwX8QDxj5AGZqZJR2DP5dhq19B9f7DW6KG234mtw/S7MhwZP7lgRrBKCr1FTHL51a98pq/AnBkj1uSggdnyfSqWVnruPSuVcauVOKEifa1yKxgYzZLDA0qhOyESPuGvH7Kga7EYgyrWykcjfeUh9RcH334+uuWp8EJ4a8GVkj8A6CPJvwX3ziqY15XH83DiHEXBCXLAyFrB+42OdOrfi5C++mqod9/X+h6XoSVUFpR9lxrgPim3hNvbwz4uW77xnup8v9Gwb13cABQmFXLf7FbBgKg7epRWGL9d8T4t9tvDbW76eroLZM60w2NrTxKt4p/4Hu6dTe+yypmYIDZgAACDT94VB+u1fWSAEqeJBYcONJfIQhDoCZLQouVGmnqVTn9sbbHxi5spHT9FozvL/obTAm9aEX0bxmvdhxeNZz4sQ7leddBXXl6Vg4F8PbEjej/ECwCpeoNqPN0gEo+4dCF5tESEGCkbO5n/gude0g/n/6f6TI0wve55ta5sw07d0nmancHClrExU54hoUCzHUMGkOC+uDeURNmQKEWQHz3zy2f4cVPLyO/nNvDZ0JDuLWuH4lZminhZdRz/SW/XvpsDwdstpOWSqa0AhNfqmoOp9KZiFpjZrRUIALWoSqF7zzrciNS3bzKndbVNvncVMU2rlqpSPHGrT6iQ76DPMA3aWonDrii8pzfZemCTjEHgujkbRZU1J/GY++T6Wgf7GTfzrcKmSGZqtcxHuHhbgdn9G4lDiTrxqg/MR9+cSyU/nFng6sv/JIXK0Fg4Sf9UMip8NMYgE=",
                "_refresh_token": "MCmr3FhU0oHas!*kzSCNGid!nwVJKLflNrhaRZvuJS83RV5*s2qr6qYU2atoThqP40tY1zGu629jq3RZ3NN!ExZ40SI**6EtgVi48LKoELlPnEejP7Ez6g8dRhzeufkbd5rm1ocAVTB34NposKJUwd3VXFELnkuvSSP9A5vE66YrmJs9w*wJFPb5RU9JclGcD*Qk*qu5lU*0m*2s8aX2fltmS76H8s0RW1YLiMm2vt*Ig78llCnCa!aM3iKptuTOzfvzaLqy1kVuvY45Q6mHl2iA1RMrtO3BrFbDEMo7er7IzSZse6xtmF0PLhHsWy6DJtUu2d8S19DtbnKjBFxcl0mFf8Cha9PHwILpHuiOskz9gVezaqypVsWjYWoSwaRedTA$$",
                "_last_processed_datetime": "892342341124",
                "_description": "This my OneDrive Personal folder",
                "_folder_list": "1111111,232323"
            }
            
+ Response 200 (application/json)

    + Body

            {
                "data": [],
                "success": "true"
            }
            

### Delete user's Silo [DELETE /silos/{siloUUID}]
    
+ Response 200 (application/json)

    + Body

            {
                "data": [],
                "success": "true"
            }
            


## Group CLASSES

Resources related to classes

## Class [/class]

A Class object has the following attributes:

+ uuid - the unique identifier of this time period in the database
+ type (string) - The type of item to create
+ name (string) - The unique name of the class 
+ _classification_code (string) - The class code
+ _description - The description of the class

## Get All Classes [GET /classes] 


+ Response 200 (application/json)


    + Body

            {
            "data":[
                        {
                            "description":"Cashmere",
                            "name":"Cashmere",
                            "class_code":"",
                            "uuid":"5321",
                            "type":"s8_classification",
                            "s8_department_class":  [
                                {
                                    "name":"Activewear",
                                    "uuid":"5373",
                                    "type":"s8_department"
                                }
                            ]
                        }
                ],
                "success":"true"
            }
            

## Get Classes for a Department [GET /classes/{deptUUID}] 

+ Parameters
    + deptUUID (long)

+ Response 200 (application/json)


    + Body

            {
            "data":[
                        {
                            "description":"Cashmere",
                            "name":"Cashmere",
                            "class_code":"",
                            "uuid":"5321",
                            "type":"s8_classification",
                            "s8_department_class":  [
                                {
                                    "name":"Activewear",
                                    "uuid":"5373",
                                    "type":"s8_department"
                                }
                            ]
                        }
                ],
                "success":"true"
            }

## Add Class [POST /add] 


+ Request (application/json)

    + Body
    
            {
                "type": "s8_classification",
                "name": "Class1",
                "_classification_code": "CODE1",
                "_description": "description1"
            }

+ Response 200 (application/json)


    + Body

            {
                "data": [
                            {
                                "description": "description1",
                                "name": "Class1",
                                "class_code": "CODE1",
                                "uuid": "5510",
                                "type": "s8_classification",
                                "s8_department_class": []
                            }
                        ],
                "success": "true"
            }
            
### Update Class [POST /update]

+ Request (application/json)

    + Body
    
            {
                "uuid": 5510
                "type": "s8_classification",
                "name": "Class1_Updated",
                "_classification_code": "CODE1",
                "_description": "description1"
            }

+ Response 200 (application/json)


    + Body

            {
                "data": [
                            {
                                "description": "description1",
                                "name": "Class1",
                                "class_code": "CODE1",
                                "uuid": "5510",
                                "type": "s8_classification",
                                "s8_department_class": []
                            }
                        ],
                "success": "true"
            }
            
### Add Department to Class [POST /addDepartment]

+ Request (application/json)

    + Body
    
            {
                "type": "s8_classification",
                "uuid": "1500",
                "s8_department_classification": [
                    {
                        "type": "s8_department",
                        "uuid": "265"
                    }
                ]
            }

+ Response 200 (application/json)


    + Body

            {
                "data": [],
                "success": "true"
            }

### Remove Department from Class [POST /removeDepartment]

+ Request (application/json)

    + Body
    
            {
                "type": "s8_classification",
                "uuid": "1500",
                "s8_department_classification": [
                    {
                        "type": "s8_department",
                        "uuid": "265"
                    }
                ]
            }

+ Response 200 (application/json)


    + Body

            {
                "data": [],
                "success": "true"
            }

## Group PROJECT MANAGEMENT

Resources related to the project management capabilities

## Task [/proj]

A Task object has the following attributes:

+ uuid - the unique identifier of this object in the database (maps to uuid in db)
+ name - The name of the task
+ start_Date  - the start date of the task in the ISO 8601 format
+ end_date - the end date of the task in the ISO 8601 format
+ duration - the numeric part of the task duration (the number of units)
+ duration_unit - the unit part of the task duration, defaults to "d" (days). Valid values are:
    + "ms" (milliseconds)
    + "s" (seconds)
    + "mi" (minutes)
    + "h" (hours)
    + "d" (days)
    + "w" (weeks)
    + "mo" (months)
    + "q" (quarters)
    + "y" (years)
+ effort - the numeric part of the task effort (the number of units). The effort of the "parent" tasks will be automatically set to the sum of efforts of their "child" tasks
+ effort_unit - the unit part of the task effort, defaults to "h" (hours). Valid values are:
    + "ms" (milliseconds)
    + "s" (seconds)
    + "mi" (minutes)
    + "h" (hours)
    + "d" (days)
    + "w" (weeks)
    + "mo" (months)
    + "q" (quarters)
    + "y" (years)
+ pct_done - the current status of a task, expressed as the percentage completed (integer from 0 to 100)
+ css - A CSS class that will be applied to each rendered task DOM element
+ baseline_start_date - the baseline start date of the task in the ISO 8601 format.
+ baseline_end_date - the baseline end date of the task in the ISO 8601 format
+ baseline_pct_done - the baseline status of a task, expressed as the percentage completed (integer from 0 to 100)
+ calendar_id - the id of the calendar, assigned to task. Allows you to set the time when task can be performed. Should be only provided for specific tasks - all tasks by default are assigned to the project calen
+ scheduling_mode - the field, defining the scheduling mode for the task
+ manually_scheduled - When set to true, the StartDate of the task will not be changed by any of its incoming dependencies or constraints. Also, a manually scheduled parent task is not affected by its child tasks and behaves like any other normal task.
+ constraint_type - A string containing the alias for a constraint class (w/o the gntconstraint prefix). Valid values are:
    + "finishnoearlierthan"
    + "finishnolaterthan"
    + "mustfinishon"
    + "muststarton"
    + "startnoearlierthan"
    + "startnolaterthan"

## Get Schedule  [GET /proj/get/{uuid}] 


+ Response 200 (application/json)


    + Body

            {
            "dependencies": {
                "rows" : [
                    {
                        "uuid"   : 1,
                        "From" : 11,
                        "To"   : 17
                    }
                ]
            },
             "assignments"  : {
                "rows" : [
                    {
                        "uuid"         : 1,
                        "TaskId"     : 11,
                        "ResourceId" : 1,
                        "units"      : 100
                    }
                ]
            },
            "resources" : {
                "rows" : [
                    {
                        "uuid"   : 1,
                        "Name" : "Mats"
                    }
                ]
            },
             "tasks" : {
                "rows" : [
                    {
                        "uuid"                : 1000,
                        "start_date"          : "2010-01-13",
                        "end_date"            : "2010-02-13",
                        "name"                : "Project A",
                        "type"                : "project",
                        "description"         : "Project A description",
                        "manually_scheduled"  : true,
                        "allow_dependencies"  : true,
                        "css"                 : "projectIcon",
                        "children"            : [
                            {
                                "baseline_end_date"   : "2010-02-01",
                                "uuid"                : 1,
                                "name"                : "Planning",
                                "pct_done"            : 50,
                                "start_date"          : "2010-01-18",
                                "baseline_start_date" : "2010-01-13",
                                "duration"            : 10,
                                "children"            : [ ]
                            }, {
                                "baseline_end_date"   : "2010-01-28",
                                "uuid"                : 11,
                                "name"                : "Investigate",
                                "pct_done"            : 50,
                                "task_type"           : "meeting",
                                "start_date"          : "2010-01-18",
                                "baseline_start_date" : "2010-01-20",
                                "segments"          : [ ]
                                "children"          : [ ]
                            }
                        ]
                    }
                ],
                "success":"true"
            }
            

## Update Schedule [POST /proj/update] 

+ Request (application/json)

    + Body
    
            {
                "uuid": "1500",
                "project_id": 1010    /// mandatory
                "resources": {
                    "added": [
                        {
                            "uuid": 101           // mandatory - must be uuid of person or role
                        }
                    ],
                    "deleted": [
                        {
                            "uuid": 101           // mandatory - must be uuid of person or role
                        }
                    ]
                },
                "tasks": {
                    "updated": [
                        {
                            "uuid": 50, 
                            "start_date": "2010-02-18T00:00:00-05:00",
                            "end_date": "2010-02-18T00:00:00-05:00",
                            "duration": 273,
                            "pct_done": 50.33,
                            "name:" "Investigation"
                        }
                    ],
                    "added": [
                        {
                            "start_date": "2015-08-19T00:00:00-04:00",
                            "end_date": "2015-08-20T00:00:00-04:00",
                            "duration": 1,
                            "duration_unit": "d",
                            "name": "New Task",
                            "ParentId:" 50                          //mandatory
                            "PhantomId": "phantomCreatedByBryntum"  //mandatory
                        }
                    ],
                    "deleted": [
                        {
                            "uuid": 1234                        //mandatory
                        }
                    ]
                },
                "dependencies": {
                    "added": [
                        {
                            "PhantomId": "phantomCreatedByBryntum" // mandatory
                            "From": 101,                           // mandatory - can use Phantom String for Task
                            "To": 102,                             // mandatory - can use Phantom String for Task
                            "lag": 0,
                            "lag_unit": "d"
                        }
                    ],
                    "updated": [
                        {
                            "uuid": 123,                            // mandatory
                            "From": 102,
                            "To": 103,
                            "lag": 1,
                            "lag_unit": "m"
                        }
                    ],
                    "deleted": [
                        {
                            "uuid": 124
                        }
                    ]
                },
                ,
                "assignments": {
                    "added": [
                        {
                            "PhantomId": "phantomCreatedByBryntum" // mandatory
                            "TaskId": 101,                         // mandatory - can use Phantom String for Task
                            "ResourceId": 102,                     // mandatory - must be valid user uuid
                            "units": 0,
                        }
                    ],
                    "updated": [
                        {
                            "uuid": 123,                            // mandatory
                            "units": 50,
                        }
                    ],
                    "deleted": [
                        {
                            "uuid": 124
                        }
                    ]
                }
            }

+ Response 200 (application/json)


    + Body

            {
                "success": "true",
                "errors": [],       // will display 1 error for each task not updated
                "tasks": []         // will contain added tasks with uuids (updates/deletes will not be included)
            }

## Add Project [POST /proj/add] 

+ Request (application/json)

    + Body
    
            {
                "name": "New Project",
                "roles": [ 101, 102, 103 ],
                "resources": [ 201, 202, 203 ],
                "visible_to": [ 401 ],
                "color": "#490390",
                "image": { std primary image }
               
            }

+ Response 200 (application/json)


    + Body

            {
                "data": [ 
                    {
                        "uuid": 500
                    }
                ],
                "success": "true"
            }
            
## Group EXTERNAL STORAGE

Resources related to 3rd party cloud base storage solutions (e.g. OneDrive, Google Drive, Box)

### Group Authentication

Each third party solution will have a different URIs to called. However, all the third party solutions provide Oauth2 authentication. Oauth2 provides an access token and a refresh token. The access token is used to determine access to the user's information. The access token generally expires in one hour. The refresh token is used to get a new access token. It generally expires after 90 days. The 'http://&lt;server&gt;/&lt;webapp&gt;/auth/onedrive' servlet stores the access token and the refresh token in a user's silo so that it can reference at a later time. The client will finally be redirect to 'http://&lt;server&gt;/&lt;webapp&gt;/siloDialog.html?siloUUID=&lt;siloUUID&gt;'.


#### OneDrive for Personal

+ Oauth2 URI - https://login.live.com/oauth20_authorize.srf

+ Parameters:
    + client_id - The id of the client registered at 'https://account.live.com/developers/applications/index'. This the StraightLines registered app.For our purposes the value is '000000004016787D'
    + scope - Determines what type of access the app is granted when the app is signed in. For our purposes the value is wl.signin and wl.offline_access. The value should be URL encoded.
    + response_type - Oauth2 allows for 2 types of responses token and code. For our purposes the value is 'code'.
    + redirect_uri - Once a token is generated, it is passed back to the redirect_uri. This uri must match the uri set in StrightLines regestered app. The value should be URL encoded.
    + state - Oauth2 allows for data to pass from the client to redirect_uri using this parameter. For our purposes the value is the user UUID and company UUID piped seperated.

+ Example - https://login.live.com/oauth20_authorize.srf?client_id=000000004016787D&scope=wl.signin%20wl.offline_access&response_type=code&redirect_uri=http%3A%2F%2Fbrentrudd.ddns.net%2FsimplyQuick%2Fauth%2Fonedrive&state=2678|0

+ Reference - https://dev.onedrive.com/auth/msa_oauth.htm

#### OneDrive for Business

+ Oauth2 URI - https://login.windows.net/common/oauth2/authorize

+ Parameters:
    + client_id - The id of the client registered at 'https://manage.windowsazure.com/str8lines.com#Workspaces/All/dashboard'. This the StraightLines registered app.For our purposes the value is '000000004016787D'
    + response_type - Oauth2 allows for 2 types of responses token and code. For our purposes the value is 'code'.
    + redirect_uri - Once a token is generated, it is passed back to the redirect_uri. This uri must match the uri set in StrightLines regestered app. The value should be URL encoded.
    + state - Oauth2 allows for data to pass from the client to redirect_uri using this parameter. For our purposes the value is the user UUID and company UUID piped seperated.

+ Example - https://login.windows.net/common/oauth2/authorize?client_id=753abfd8-d355-443c-90d7-27215bf073f6&response_type=code&redirect_uri=http%3A%2F%2Fbrentrudd.ddns.net%2FsimplyQuick%2Fauth%2Fonedrivebusiness&state=2678|0

+ Reference - https://dev.onedrive.com/app-registration.htm#register-your-app-for-onedrive-for-business

### Group External Service API

#### List Contents [GET /ext/list/{soliUUID}/{directory}]

List items in directory

+ Parameters
    + soliUUID (long)
    + directory (string) - This should be URL encoded

+ Response 200 (application/json)


    + Body

            {
            "data":[
                        {
                            "description":"Cashmere",
                            "name":"Cashmere",
                            "class_code":"",
                            "uuid":"5321",
                            "type":"s8_classification",
                            "s8_department_class":  [
                                {
                                    "name":"Activewear",
                                    "uuid":"5373",
                                    "type":"s8_department"
                                }
                            ]
                        }
                ],
                "success":"true"
            }

